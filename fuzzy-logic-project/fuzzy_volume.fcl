FUNCTION_BLOCK

VAR_INPUT
front_sensor : REAL;
left_sensor : REAL;
right_sensor : REAL;
END_VAR

VAR_OUTPUT
direction : REAL;
END_VAR

FUZZIFY front_sensor
TERM near := (0, 1) (30, 1) (40, 0.50) (50, 0);
TERM medium := (25, 0) (40, 0.50) (50, 1) (60, 1) (66, 0.50) (70, 0);
TERM far := (55, 0) (70, 0.50) (85, 1) (100, 1);
END_FUZZIFY

FUZZIFY left_sensor
TERM near := (0, 1) (50, 0.5) (100, 0);
TERM far := (0, 0) (50, 0.50) (100, 1);
END_FUZZIFY

FUZZIFY right_sensor
TERM near := (0, 1) (50, 0.5) (100, 0);
TERM far := (0, 0) (50, 0.50) (100, 1);
END_FUZZIFY

DEFUZZIFY direction
TERM left := (-50, 1) (-30, 1) (-20, 0.50) (-10, 0);
TERM forward := (-30, 0) (-20, 0.5) (-10, 1) (10, 1) (20, 0.50) (30, 0);
TERM right := (10, 0) (20, 0.50) (30, 1) (50, 1);
METHOD : COG;
DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK first
AND: MIN;
ACT: MIN;

RULE 0: IF front_sensor IS near AND left_sensor IS near AND right_sensor is near THEN direction IS forward;
RULE 1: IF front_sensor IS near AND left_sensor IS near AND right_sensor is far THEN direction IS right;
RULE 2: IF front_sensor IS near AND left_sensor IS far AND right_sensor is near THEN direction IS left;
RULE 3: IF front_sensor IS near AND left_sensor IS far AND right_sensor is far THEN direction IS right;

RULE 4: IF front_sensor IS medium AND left_sensor IS near AND right_sensor is near THEN direction IS forward;
RULE 5: IF front_sensor IS medium AND left_sensor IS near AND right_sensor is far THEN direction IS right;
RULE 6: IF front_sensor IS medium AND left_sensor IS far AND right_sensor is near THEN direction IS left;
RULE 7: IF front_sensor IS medium AND left_sensor IS far AND right_sensor is far THEN direction IS right;

RULE 8: IF front_sensor IS far AND left_sensor IS near AND right_sensor is near THEN direction IS forward;
RULE 9: IF front_sensor IS far AND left_sensor IS near AND right_sensor is far THEN direction IS right;
RULE 10: IF front_sensor IS far AND left_sensor IS far AND right_sensor is near THEN direction IS left;
RULE 11: IF front_sensor IS far AND left_sensor IS far AND right_sensor is far THEN direction IS forward;

END_RULEBLOCK
END_FUNCTION_BLOCK